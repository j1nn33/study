# классам назначают имена с заглавной буквы
class Set:
    # ниже идут компонентные функции
    # каждая берет первый параметр "self" (еще одно правило),
    # который ссылается на конкретный используемый объект класса Set
    def __init__ (self, values=None): 
        """Это конструктор.
        Вызывается при создании нового объекта класса Set и
        используется следующим образом:
        si = Set() # пустое множество
        s2 = Set ([1,2,2,3]) # инициализировать значениями"""
        self.dict = {}  # каждый экземпляр имеет собственное свойство dict,
                        # которое используется для проверки
                        # на принадлежность элементов множеству
        if values is not None:
            for value in values: self.add(value)
    def __repr__ (self) :
        """это строковое представление объекта Set,
        которое выводится в оболочке или передается в функцию str()"""
        return "Set: " + str(self.dict.keys())
    
    # принадлежность представлена ключом в словаре self.diet
    # со значением True
    def add(self, value):
        self.dict[value] = True

    # значение принадлежит множеству, если его ключ имеется в словаре
    def contains(self, value):
        return value in self.dict
    
    def remove(self, value):
       del self.dict[value]

# Все это можно использовать следующим образом:
s = Set ([1,2,3])
s.add(4)
print(s.contains(4)) # True 
s.remove(3)
print(s.contains(3)) # False

