# Пусть в документе необходимо подсчитать слова. Очевидным решением задачи
# является создание словаря, в котором ключи — это слова, а значения — частотности слов (или количества вхождений слов в текст). Во время проверки слов в случае, если текущее слово уже есть в словаре, то его частотность увеличивается, а
# если отсутствует, то оно добавляется в словарь:

word_counts = {}
document = {} # некий документ; здесь он пустой
for word in document:
    if word in word_counts:
        word_counts[word] += 1
    else:
        word_counts[word] = 1

#Кроме этого, можно воспользоваться риемом под названием "лучше просить прощения, чем разрешения" и перехватывать ошибку при попытке обратиться к отсутствующему ключу:
word_counts = {}
for word in document:
    try:
        word_counts[word] += 1
    except KeyError:
        word_counts[word] = 1

# Третий прием — использовать метод get (), который изящно выходит из ситуации с
# отсутствующими ключами:
word_counts = {}
for word in document:
    previous_count = word_counts.get(word, 0)
    word_counts[word] = previous_count + 1

# Все перечисленные приемы немного громоздкие, и по этой причине целесообразно
# использовать словарь defaultdict (который еще называют словарем со значением по
# умолчанию). Он похож на обычный словарь за исключением одной особенности —
# при попытке обратиться к ключу, которого в нем нет, он сперва добавляет для него
# значение, используя функцию без аргументов, которая предоставляется при его
# создании. Чтобы воспользоваться словарями defaultdict, их необходимо импортировать ИЗ модуля collections:

from collections import defaultdict
word_counts = defaultdict(int) # int() возвращает 0
for word in document:
    word_counts[word] += 1

# Кроме того, использование словарей defaultdict имеет практическую пользу во
# время работы со списками, словарями и даже с пользовательскими функциями:
dd_list = defaultdict(list)         # list О возвращает пустой список
dd_list[2].append(1)                # теперь dd_list содержит (2: [1])

dd_dict = defaultdict(dict)         # dict() возвращает пустой словарь dict
dd_dict["Joel"]["City"] = "Seattle" # { "Joel" : { "City" : Seattle"}}

dd_pair = defaultdict(lambda: [0, 0])
dd_pair[2][1] =1                    # теперь dd_pair содержит {2: [0,1]}

#Эти возможности понадобятся, когда словари будут использоваться для "сбора"
#результатов по некоторому ключу и когда необходимо избежать повторяющихся
#проверок на присутствие ключа в словаре

#Словарь Counter
#Подкласс словарей counter трансформирует последовательность значений в похожий на словарь defaultdict (int) объект, где ключам поставлены в соответствие частотности или, выражаясь более точно, ключи отображаются (тар) в частотности.
#Он в основном будет применяться при создании гистограмм:
from collections import Counter
c = Counter([0, 1, 2, 0]) # в результате с = { 0 : 2, 1 : 1, 2 : 1 }
#Его функционал позволяет достаточно легко решить задачу подсчета частотностей слов:
# лучший вариант подсчета частотностей слов
word_counts = Counter(document)
#Словарь counter располагает методом most_common(), который нередко бывает полезен:

# напечатать 10 наиболее встречаемых, слов и их частотность (встречаемость)

for word, count in word_counts.most_common(10):
    print(word, count)
